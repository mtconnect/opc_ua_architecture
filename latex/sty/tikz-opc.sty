%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%Library for OPC UA Nodes and References%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\usepackage{tikz}
\usetikzlibrary{shadows.blur}
\usetikzlibrary{shapes,arrows, arrows.meta}
\usetikzlibrary{decorations.markings}
\usepackage{xifthen}
\usepackage[outline]{contour}
\usepackage{caption}
\usetikzlibrary{decorations.pathreplacing}
\usetikzlibrary{shapes.multipart}

%References
%   \Reference{NAME}{SOURCE}{PATH_PROFILE}{DESTINATION}{OPTIONAL_ARGUMENTS};
%   \HasComponent{}{Reservation}{--}{Cancel}{};

%Nodes
%   \Node{NAME}{RELATIVE_POSITION}{RELATIVE_TO}{NODE_DISTANCE};
%   \Method{Cancel}{right of}{Reservation}{3.5};

\newcommand{\defaultstyle}{
\tikzset{every picture/.style={/utils/exec={\sffamily}}};
\contourlength{1.2pt}
}

%References

%Sym/Asym references

%Symmetric Reference
\newcommand{\SymmetricReference}[5]{
\defaultstyle;
\tikzstyle{triangle} = [draw, very thick, color=black!70, -{Triangle[scale=1.5]}];
\path [triangle] (#4) #3 (#2);
\path [triangle] (#2) #3 (#4) node [midway, above, text width = 2cm, align= center, #5] (TextNode) {\contour{white}{#1}};
}

%Asymmetric Reference
\newcommand{\AsymmetricReference}[5]{
\defaultstyle;
\tikzstyle{triangle} = [draw, very thick, color=black!70, -{Triangle[scale=1.5]}];
\path [triangle] (#2) #3 (#4) node [midway, above, text width = 2cm, align= center, #5] (TextNode) {\contour{white}{#1}};
}

%HasEventSource references

\newcommand{\HasEventSource}[5]{
\defaultstyle;
\tikzstyle{triangle2} = [draw, very thick, color=black!70, -{Triangle[scale=1.5, open]}];
\path [triangle2] (#2) #3 (#4) node [midway, above, text width = 2cm, align= center, #5] (TextNode) {\contour{white}{#1}};
}

%HasTypeDefinition references

\newcommand{\HasTypeDefinition}[5]{
\defaultstyle;
\tikzstyle{triangle3} = [draw, very thick, color=black!70, -{Triangle[scale=1.5]}, postaction ={draw, shorten >=0.8em, -{Triangle[scale=1.5]}}];
\path [triangle3] (#2) #3 (#4) node [midway, above, text width = 2cm, align= center, #5] (TextNode) {\contour{white}{#1}};
}

%HasSubType references

\newcommand{\HasSubType}[5]{
\defaultstyle;
\tikzstyle{triangle4} = [draw, very thick, color=black!70, -{Triangle[scale=1.5, open]}, postaction ={draw, shorten >=0.8em, -{Triangle[scale=1.5, open, fill = white!=100]}}];
\path [triangle4] (#4) #3 (#2) node [midway, above, text width = 2cm, align= center, #5] (TextNode) {\contour{white}{#1}};
}

%Hierarchical references

\newcommand{\HierarchicalReference}[5]{
\defaultstyle;
\tikzstyle{angle} = [draw, very thick, color=black!70, -{Straight Barb[angle'=60,scale=2]}];
\path [angle] (#2) #3 (#4) node [midway, above, text width = 2cm, align= center, #5] (TextNode) {\contour{white}{#1}};
}

%HasComponent references

\newcommand{\HasComponent}[5]{
\defaultstyle;
\tikzstyle{barb} = [draw, very thick, color=black!70, -, postaction ={draw, shorten >=0.7em, -{|[scale=1]}} ];
\path [barb] (#2) #3 (#4) node [midway, above, text width = 2cm, align= center, #5] (TextNode) {\contour{white}{#1}};
}

%HasProperty references

\newcommand{\HasProperty}[5]{
\defaultstyle;
\tikzstyle{barb2} = [draw, very thick, color=black!70, -, postaction ={draw, shorten >=0.7em, -{|[scale=1]}, postaction ={draw, shorten >=1em, -{|[scale=1]}}}];
\path [barb2] (#2) #3 (#4) node [midway, above, text width = 2cm, align= center, #5] (TextNode) {\contour{white}{#1}};
}


%Node Classes

%TYPES
\newcommand{\defaultstyletypes}{
\tikzset{
    render blur shadow/.prefix code={
      \colorlet{black}{cyan!15}}
}
}

%ObjectType

\newcommand{\ObjectType}[5]{
\defaultstyletypes;
\tikzstyle{typeobjecttype} = [rectangle, draw, fill=cyan!7, blur shadow ={shadow xshift=2ex, shadow yshift=-2ex, shadow scale=\number1} , minimum width=6em, text centered, minimum height=3em];
    %node distance default 
    \ifthenelse{\equal{#4}{}}{\def \nd {2}}{\def \nd {#4}}
    
    %position default
    \ifthenelse{\equal{#2}{} \AND \equal{#3}{}}{\def \posL {node distance}, \def \posR {\nd cm}}{\def \posL {#2}, \def \posR {#3}}
    
    \node [typeobjecttype, \posL = \posR, node distance = \nd cm, #5] (#1) {\emph{#1}}
}

%VariableType

\newcommand{\VariableType}[5]{
\defaultstyletypes;
\tikzstyle{typevariabletype} = [rectangle, draw, fill=cyan!7, blur shadow ={shadow xshift=2ex, shadow yshift=-2ex, shadow scale=1}, minimum width=6em, text centered, rounded corners = 5pt, minimum height=3em];
    %node distance default 
    \ifthenelse{\equal{#4}{}}{\def \nd {2}}{\def \nd {#4}}
    
    %position default
    \ifthenelse{\equal{#2}{} \AND \equal{#3}{}}{\def \posL {node distance}, \def \posR {\nd cm}}{\def \posL {#2}, \def \posR {#3}}
    \node [typevariabletype, \posL = \posR, node distance = \nd cm, #5] (#1) {\emph{#1}}
}

%DataType

\newcommand{\DataType}[5]{
\defaultstyletypes;
\tikzstyle{typedatatype} = [chamfered rectangle, chamfered rectangle angle = 20, chamfered rectangle xsep=1cm, chamfered rectangle ysep = 0.3cm, draw, fill= cyan!7, blur shadow ={shadow xshift=2ex, shadow yshift=-2ex, shadow scale=1}, minimum width=6em, text centered , minimum height = 3em];
    %node distance default 
    \ifthenelse{\equal{#4}{}}{\def \nd {2}}{\def \nd {#4}}
    
    %position default
    \ifthenelse{\equal{#2}{} \AND \equal{#3}{}}{\def \posL {node distance}, \def \posR {\nd cm}}{\def \posL {#2}, \def \posR {#3}}
    
    \node [typedatatype, \posL = \posR, node distance = \nd cm, #5] (#1) {\emph{#1}}
}

%ReferenceType
\newcommand{\ReferenceType}[5]{
    \defaultstyletypes;
    
    %Can be an option argument scale: default as 3.
    \def \customscale {3}; %{#X}
    %\ifthenelse{\customscale<3}{\def \customscale {3}}{}
    
    %node distance default 
    \ifthenelse{\equal{#4}{}}{\def \nd {2}}{\def \nd {#4}};
    
    %position default
    \ifthenelse{\equal{#2}{} \AND \equal{#3}{}}{\def \posL {node distance}, \def \posR {\nd cm}}{\def \posL {#2}, \def \posR {#3}};
    
    \coordinate [\posL = \posR, node distance = \nd cm] (center);
    
    \path (center) -- + (-0.4*\customscale,0.2*\customscale) coordinate (A);
    \draw (A) -- + (1.2*\customscale,0) coordinate (B);
    \draw (B) -- + (-0.1*\customscale,-0.2*\customscale) coordinate (C);
    \draw (C) -- + (+0.1*\customscale,-0.2*\customscale) coordinate (D);
    \draw (D) -- + (-1.2*\customscale,0) coordinate (E);
    \draw (E) -- + (-0.1*\customscale,0.2*\customscale) coordinate (F);
    \draw (F) -- + (0.1*\customscale,0.2*\customscale) coordinate (G);
    \filldraw[draw,  fill = cyan!7, blur shadow ={ shadow xshift=2ex, shadow yshift=-2ex, shadow scale=1}] (A) -- (B) -- (C) -- (D) -- (E) -- (F) -- (G);
    \node [minimum width = 3cm, text width = 2.5cm, align = center, minimum height= 1.15 cm, #5] (#1) at (center) {\emph{#1}}
}


%INSTANCES
%Object

\newcommand{\Object}[5]{
\tikzstyle{instanceobject} = [rectangle, draw, fill=black!7, drop shadow , minimum width=6em, text centered, minimum height=3em];
    %node distance default 
    \ifthenelse{\equal{#4}{}}{\def \nd {2}}{\def \nd {#4}}
    
    %position default
    \ifthenelse{\equal{#2}{} \AND \equal{#3}{}}{\def \posL {node distance}, \def \posR {\nd cm}}{\def \posL {#2}, \def \posR {#3}}
    
    \node [instanceobject, \posL = \posR, node distance = \nd cm, #5] (#1) {#1};
}


%Variable

\newcommand{\Variable}[5]{
\tikzstyle{instancevariable} = [rectangle, draw, fill=black!7,drop shadow , minimum width=6em, text centered, rounded corners = 5pt, minimum height=3em];
    %node distance default 
    \ifthenelse{\equal{#4}{}}{\def \nd {2}}{\def \nd {#4}}
    
    %position default
    \ifthenelse{\equal{#2}{} \AND \equal{#3}{}}{\def \posL {node distance}, \def \posR {\nd cm}}{\def \posL {#2}, \def \posR {#3}}
    
    \node [instancevariable,\posL = \posR, node distance = \nd cm, #5] (#1) {#1};
}


%Method

\newcommand{\Method}[5]{
\tikzstyle{instancemethod} = [ellipse, draw, fill=black!7,drop shadow ,  minimum width=6em, text centered, minimum height=3em];
    %node distance default 
    \ifthenelse{\equal{#4}{}}{\def \nd {2}}{\def \nd {#4}}
    
    %position default
    \ifthenelse{\equal{#2}{} \AND \equal{#3}{}}{\def \posL {node distance}, \def \posR {\nd cm}}{\def \posL {#2}, \def \posR {#3}}
    \node [instancemethod,\posL = \posR, node distance = \nd cm, #5] (#1) {#1}
}

%View

\newcommand{\View}[5]{
\tikzstyle{instanceview} = [trapezium, trapezium left angle = 80, trapezium right angle = 80,  draw, fill=black!7,drop shadow ,minimum width=6em, text centered, minimum height =3 em];
    
    %node distance default 
    \ifthenelse{\equal{#4}{}}{\def \nd {2}}{\def \nd {#4}}
    
    %position default
    \ifthenelse{\equal{#2}{} \AND \equal{#3}{}}{\def \posL {node distance}, \def \posR {\nd cm}}{\def \posL {#2}, \def \posR {#3}}
    
    \node [instanceview, \posL = \posR, node distance = \nd cm, #5] (#1) {#1}
}

%Empty node

\newcommand{\Coordinate}[5]{
    %node distance default 
    \ifthenelse{\equal{#4}{}}{\def \nd {2}}{\def \nd {#4}}
    
    %position default
    \ifthenelse{\equal{#2}{} \AND \equal{#3}{}}{\def \posL {node distance}, \def \posR {\nd cm}}{\def \posL {#2}, \def \posR {#3}}
    
    \coordinate [ \posL = \posR, node distance = \nd cm, #5] (#1) {}
}